{"version":3,"sources":["components/Students.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Students","history","useHistory","useState","data","setData","students","setStudents","error","setError","getStudent","e","studentName","element","target","className","elements","childNodes","console","log","forEach","elem","classList","contains","innerHTML","split","selected","filter","student","name","first","localStorage","setItem","JSON","stringify","push","useEffect","getItem","parseData","parse","axios","get","headers","then","res","results","catch","message","setTimeout","removeItem","Form","onSubmit","preventDefault","input","document","getElementById","value","result","toLowerCase","last","length","Group","Col","md","sm","xs","Control","type","placeholder","id","Button","map","onClick","key","Card","style","width","height","marginBottom","Img","variant","src","picture","large","Body","Title","textAlign","Profile","studentInfo","info","alt","gender","dob","age","location","country","state","street","number","phone","email","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ccf3b45.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom'\nimport axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport './components.css'\n// import Searchbox from './Searchbox';\nimport {Form, Button, Col, Row} from 'react-bootstrap'\n\n\n\nconst Students = () => {\n\n  let history = useHistory()\n  const [data, setData] = useState([])\n  const [students, setStudents] = useState([])\n  const [error, setError] = useState('')\n  const url = 'https://randomuser.me/api?results=25&nat=us'\n\n  const getStudent = (e) => {\n    let element = e.target;\n    let studentName;\n\n    // Check if the clicked target has the class name \"card-body\"\n    if(element.className === \"card-body\"){\n\n      const elements = element.childNodes\n      console.log(elements)\n      elements.forEach(elem => {\n        if(elem.classList.contains('studentName')){\n\n          studentName = elem.innerHTML.split(' ')\n        }\n      })\n\n      const selected = students.filter((student) => {\n        return student.name.first === studentName[0]\n      })\n\n        localStorage.setItem('student', JSON.stringify(selected[0]))\n        return history.push('/profile')\n    }\n\n    // Check if clicked target contains the class name \"studentName\"\n    if(element.classList.contains('studentName')){\n      studentName = element.innerHTML.split(' ')\n\n      const selected = students.filter((student) => {\n        return student.name.first === studentName[0]\n      })\n\n      localStorage.setItem('student', JSON.stringify(selected[0]))\n      return history.push('/profile')\n    }\n    return;\n  }\n\n\n  useEffect(() => {\n\n    if(localStorage.getItem('fetch')){\n      const parseData = localStorage.getItem('fetch') // Fetching data from local storage\n      setData(JSON.parse(parseData))\n      setStudents(JSON.parse(parseData))\n\n    }else{\n      axios.get(url, {\n        headers: {\n          'Content-Type': 'application/json'\n        }})\n      .then((res) => {\n\n        localStorage.setItem('fetch', JSON.stringify(res.data.results)) // Stores data on local storage\n         setStudents(res.data.results)\n         setData(res.data.results)\n         console.log('fetched')\n         console.log(students)\n      })\n      .catch(error => {\n        console.log(error.message)\n      })\n    }\n\n    // Clear local storage after 5 seconds\n    setTimeout(() => {\n        localStorage.removeItem('fetch')\n      }, 5000)\n\n  }, [])\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    let input = document.getElementById('input').value\n   const result =  data.filter(student => {\n      if(input.toLowerCase() === student.name.first.toLowerCase() || \n        input.toLowerCase() === student.name.last.toLowerCase()){\n        return student;\n      }\n      return null\n    })\n\n    // if(result.)\n    if(result.length === 0){\n      setStudents([])\n      setError(\"Search not found\")\n    }else{\n      setError('')\n      setStudents(result)\n    }\n\n    console.log(data)\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* <Searchbox students={students}/> */}\n\n      {/* Search box */}\n      <div className=\"p-3\">\n      <Form onSubmit={handleSearch}>\n        <Form.Group>\n          <Col md=\"11\" sm=\"10\" xs=\"10\">\n            <Form.Control type=\"text\" placeholder=\"Search\" id=\"input\"/>\n          </Col>\n          <Col md=\"1\" sm=\"2\" xs=\"2\">\n            <Button type=\"submit\">Search</Button>\n          </Col>\n        </Form.Group>\n      </Form>\n    </div>\n\n      {/* Student card list */}\n      <div className=\"container\">\n        <div className=\"row\">\n          {students.map((student) => (\n            <div onClick={getStudent} className=\"m-auto cards\" key={student.id.value}>\n              <Card\n                \n                style={{ width: '200px',height: 'auto', marginBottom: \"20px\"}} \n                className=\"mb-5\" >\n\n                <Card.Img variant='top' src={student.picture.large}/>\n                <Card.Body>\n                <Card.Title className=\"studentName\">{student.name.first+' '+student.name.last}</Card.Title>\n                </Card.Body>\n              </Card>\n            </div>\n      \n          \n          \n          ))}\n        </div>\n      </div>\n          <h2 style={{textAlign: \"center\"}}>{error}</h2>\n    </div>\n  );\n}\n\nexport default Students;\n","import React, {useState} from 'react'\nimport './components.css'\n\nconst Profile = () => {\n  let studentInfo = localStorage.getItem('student')\n  let info = JSON.parse(studentInfo)\n  console.log(info)\n  const [student] = useState(info)\n  return (\n    <div>\n      <div className=\"profileContainer\">\n        <div className=\"profile-pic-area\">\n        <img src={student.picture.large} alt=\"profile\" className=\"rounded-circle\" />\n        <h4>{student.name.first} {student.name.last}</h4>\n        </div>\n\n        <div className=\"profile-info-area\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Gender:</th>\n                <td>{student.gender}</td>\n              </tr>\n              <tr>\n                <th>Age:</th>\n                <td>{student.dob.age}</td>\n              </tr>\n              <tr>\n                <th>Country:</th>\n                <td>{student.location.country}</td>\n              </tr>\n              <tr>\n                <th>State:</th>\n                <td>{student.location.state}</td>\n              </tr>\n              <tr>\n                <th>Address:</th>\n                <td>No. {student.location.street.number} {student.location.street.name}</td>\n              </tr>\n              <tr>\n                <th>Phone Number:</th>\n                <td>{student.phone}</td>\n              </tr>\n              <tr>\n                <th>Email:</th>\n                <td>{student.email}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Profile\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport Students from './components/Students';\nimport Profile from './components/Profile'\n\nconst App = () => {\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Students} />\n        <Route exact path=\"/profile\" component={Profile} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}